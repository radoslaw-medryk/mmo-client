{"version":3,"sources":["webpack://mmo-client/./src/utils/randomColor.ts","webpack://mmo-client/./src/utils/randomNumber.ts","webpack://mmo-client/./src/utils/sure.ts","webpack://mmo-client/./src/visual/canvas/Canvas.ts","webpack://mmo-client/./src/visual/chunk/Chunk.ts","webpack://mmo-client/./src/visual/layer/Layer.ts","webpack://mmo-client/./src/visual/logic/getBufferedViewPortGamePxCoords.ts","webpack://mmo-client/./src/visual/logic/getChunkPosition.ts","webpack://mmo-client/./src/visual/logic/getGamePxPosition.ts","webpack://mmo-client/./src/visual/logic/getViewPortGamePxCoords.ts","webpack://mmo-client/./src/visual/mountable/Mountable.ts","webpack://mmo-client/./src/visual/viewport/ViewPort.ts","webpack://mmo-client/webpack/bootstrap","webpack://mmo-client/webpack/runtime/make namespace object","webpack://mmo-client/./src/index.ts"],"names":["r","randomNumber","g","b","toString","padStart","min","max","Math","floor","random","value","Error","visualConsts","canvas","document","createElement","tileSize","chunkSize","canvasPxSizeWidth","pxWidth","tilesWidth","canvasPxSizeHeight","pxHeight","tilesHeight","width","height","context","sure","getContext","mount","parent","this","unmount","fillTile","tileX","tileY","color","canvasPxX","canvasPxY","fillStyle","fillRect","text","strokeStyle","font","fillText","strokeText","Mountable","Canvas","chunkSettings","container","className","getGamePxPosition","position","gamePxX","gamePxY","style","left","top","__fillChunk","x","y","__fillTile","randomColor","Chunk","chunks","layerState","center","centerOn","syncChunks","topLeft","getViewPortGamePxCoords","viewPort","bufferedViewPort","getBufferedViewPortGamePxCoords","bufferedViewPortTopLeftChunk","getChunkPosition","bufferedViewPortBottomRightChunk","bottomRight","removeChunksOutside","createMissingChunksInside","topLeftChunk","bottomRightChunk","i","length","chunk","chunkPosX","chunksX","chunkPosY","chunksY","console","log","splice","chunkX","chunkY","some","q","push","Layer","bufferSizePx","gamePxPosition","chunkPxWidth","chunkPxHeight","chunkPosition","viewPortSize","viewPortGamePxWidth","viewPortGamePxHeight","current","appendChild","removeChild","undefined","viewPortPxWidth","viewPortPxHeight","layer","ViewPort","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","Symbol","toStringTag","Object","defineProperty","root","body","viewport","addEventListener","code","dx","dy"],"mappings":"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","file":"index.js","sourcesContent":["import { randomNumber } from \"./randomNumber\";\n\nexport function randomColor() {\n    const r = randomNumber(0, 256);\n    const g = randomNumber(0, 256);\n    const b = randomNumber(0, 256);\n\n    const rx = r.toString(16).padStart(2, \"0\");\n    const gx = g.toString(16).padStart(2, \"0\");\n    const bx = b.toString(16).padStart(2, \"0\");\n\n    return `#${rx}${gx}${bx}`;\n}\n","export function randomNumber(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n","export function sure<T>(value: T | null | undefined): T {\n    if (value === null || value === undefined) {\n        throw new Error(\"value === null || value === undefined\");\n    }\n\n    return value;\n}\n","import { sure } from \"../../utils/sure\";\nimport { Mountable } from \"../mountable/Mountable\";\nimport { VisualConsts } from \"../VisualConsts\";\n\nexport class Canvas extends Mountable {\n    private visualConsts: VisualConsts;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n\n    constructor(visualConsts: VisualConsts) {\n        super();\n\n        this.visualConsts = visualConsts;\n\n        this.canvas = document.createElement(\"canvas\");\n\n        const { tileSize, chunkSize } = visualConsts;\n        const canvasPxSizeWidth = tileSize.pxWidth * chunkSize.tilesWidth;\n        const canvasPxSizeHeight = tileSize.pxHeight * chunkSize.tilesHeight;\n\n        this.canvas.width = canvasPxSizeWidth;\n        this.canvas.height = canvasPxSizeHeight;\n\n        this.context = sure(this.canvas.getContext(\"2d\"));\n    }\n\n    public mount(parent: HTMLElement) {\n        super.mount(parent, this.canvas);\n    }\n\n    public unmount() {\n        super.unmount(this.canvas);\n    }\n\n    public fillTile(tileX: number, tileY: number, color: string) {\n        const { tileSize } = this.visualConsts;\n\n        const canvasPxX = tileSize.pxWidth * tileX;\n        const canvasPxY = tileSize.pxHeight * tileY;\n\n        this.context.fillStyle = color;\n        this.context.fillRect(canvasPxX, canvasPxY, tileSize.pxWidth, tileSize.pxHeight);\n\n        const text = `${tileX} / ${tileY}`;\n        this.context.strokeStyle = \"#444\";\n        this.context.fillStyle = \"#fff\";\n        this.context.font = \"32px Arial\";\n        this.context.fillText(text, canvasPxX + 20, canvasPxY + 60);\n        this.context.strokeText(text, canvasPxX + 20, canvasPxY + 60);\n    }\n}\n","import { getGamePxPosition } from \"../logic/getGamePxPosition\";\nimport { Canvas } from \"../canvas/Canvas\";\nimport { Mountable } from \"../mountable/Mountable\";\nimport { VisualConsts } from \"../VisualConsts\";\nimport { ChunkSettings } from \"./ChunkSettings\";\nimport { randomColor } from \"../../utils/randomColor\";\n\nexport class Chunk extends Mountable {\n    private visualConsts: VisualConsts;\n    private container: HTMLDivElement;\n    private canvas: Canvas;\n\n    public chunkSettings: ChunkSettings;\n\n    constructor(visualConsts: VisualConsts, chunkSettings: ChunkSettings) {\n        super();\n\n        this.visualConsts = visualConsts;\n        this.chunkSettings = chunkSettings;\n\n        this.container = document.createElement(\"div\");\n        this.container.className = \"mmo-chunk\";\n\n        const { gamePxX, gamePxY } = getGamePxPosition(visualConsts, chunkSettings.position);\n        this.container.style.left = `${gamePxX}px`;\n        this.container.style.top = `${gamePxY}px`;\n\n        this.canvas = new Canvas(visualConsts);\n        this.canvas.mount(this.container);\n    }\n\n    public mount(parent: HTMLElement) {\n        super.mount(parent, this.container);\n    }\n\n    public unmount() {\n        super.unmount(this.container);\n    }\n\n    public __fillChunk() {\n        for (let x = 0; x < 6; x++) {\n            for (let y = 0; y < 6; y++) {\n                this.__fillTile(x, y, randomColor());\n            }\n        }\n    }\n\n    private __fillTile(tileX: number, tileY: number, color: string) {\n        this.canvas.fillTile(tileX, tileY, color);\n    }\n}\n","import { ChunkPosition } from \"../../models/ChunkPosition\";\nimport { randomColor } from \"../../utils/randomColor\";\nimport { Chunk } from \"../chunk/Chunk\";\nimport { Mountable } from \"../mountable/Mountable\";\nimport { VisualConsts } from \"../VisualConsts\";\nimport { LayerState } from \"./LayerState\";\nimport { getChunkPosition } from \"../logic/getChunkPosition\";\nimport { getViewPortGamePxCoords } from \"../logic/getViewPortGamePxCoords\";\nimport { GamePxPosition } from \"../../models/GamePxPosition\";\nimport { getBufferedViewPortGamePxCoords } from \"../logic/getBufferedViewPortGamePxCoords\";\n\nexport class Layer extends Mountable {\n    private container: HTMLDivElement;\n    private chunks: Chunk[] = [];\n\n    private visualConsts: VisualConsts;\n    private layerState: LayerState;\n\n    constructor(visualConsts: VisualConsts) {\n        super();\n\n        this.visualConsts = visualConsts;\n\n        this.layerState = {\n            center: {\n                gamePxX: 0,\n                gamePxY: 0,\n            },\n        };\n\n        this.container = document.createElement(\"div\");\n        this.container.className = \"mmo-layer\";\n\n        this.centerOn(this.layerState.center);\n    }\n\n    public mount(parent: HTMLElement) {\n        super.mount(parent, this.container);\n    }\n\n    public unmount() {\n        super.unmount(this.container);\n    }\n\n    public centerOn(position: GamePxPosition) {\n        const { gamePxX, gamePxY } = position;\n        this.layerState.center.gamePxX = gamePxX;\n        this.layerState.center.gamePxY = gamePxY;\n\n        this.syncChunks();\n\n        const { topLeft } = getViewPortGamePxCoords(this.visualConsts, this.layerState);\n\n        this.container.style.left = `${-topLeft.gamePxX}px`;\n        this.container.style.top = `${-topLeft.gamePxY}px`;\n    }\n\n    private syncChunks() {\n        const viewPort = getViewPortGamePxCoords(this.visualConsts, this.layerState);\n        const bufferedViewPort = getBufferedViewPortGamePxCoords(this.visualConsts, viewPort);\n\n        const bufferedViewPortTopLeftChunk = getChunkPosition(this.visualConsts, bufferedViewPort.topLeft);\n        const bufferedViewPortBottomRightChunk = getChunkPosition(this.visualConsts, bufferedViewPort.bottomRight);\n\n        this.removeChunksOutside(bufferedViewPortTopLeftChunk, bufferedViewPortBottomRightChunk);\n        this.createMissingChunksInside(bufferedViewPortTopLeftChunk, bufferedViewPortBottomRightChunk);\n    }\n\n    private removeChunksOutside(topLeftChunk: ChunkPosition, bottomRightChunk: ChunkPosition) {\n        for (let i = this.chunks.length - 1; i >= 0; i--) {\n            const chunk = this.chunks[i];\n            const chunkPosX = chunk.chunkSettings.position.chunksX;\n            const chunkPosY = chunk.chunkSettings.position.chunksY;\n\n            if (\n                chunkPosX < topLeftChunk.chunksX ||\n                chunkPosX > bottomRightChunk.chunksX ||\n                chunkPosY < topLeftChunk.chunksY ||\n                chunkPosY > bottomRightChunk.chunksY\n            ) {\n                console.log(`>>> REMOVING CHUNK [${chunkPosX}, ${chunkPosY}]`);\n                this.chunks[i].unmount();\n                this.chunks.splice(i, 1);\n            }\n        }\n    }\n\n    private createMissingChunksInside(topLeftChunk: ChunkPosition, bottomRightChunk: ChunkPosition) {\n        for (let chunkX = topLeftChunk.chunksX; chunkX <= bottomRightChunk.chunksX; chunkX++) {\n            for (let chunkY = topLeftChunk.chunksY; chunkY <= bottomRightChunk.chunksY; chunkY++) {\n                const isAlready = this.chunks.some(\n                    q => q.chunkSettings.position.chunksX === chunkX && q.chunkSettings.position.chunksY === chunkY\n                );\n\n                if (isAlready) {\n                    continue;\n                }\n\n                console.log(`>>> CREATING CHUNK [${chunkX}, ${chunkY}]`);\n\n                const chunk = new Chunk(this.visualConsts, {\n                    position: {\n                        chunksX: chunkX,\n                        chunksY: chunkY,\n                    },\n                });\n                chunk.mount(this.container);\n                chunk.__fillChunk();\n                this.chunks.push(chunk);\n            }\n        }\n    }\n}\n","import { GamePxPosition } from \"../../models/GamePxPosition\";\nimport { GamePxRectangle } from \"../../models/GamePxRectangle\";\nimport { VisualConsts } from \"../VisualConsts\";\n\nexport function getBufferedViewPortGamePxCoords(\n    visualConsts: VisualConsts,\n    viewPort: GamePxRectangle\n): GamePxRectangle {\n    const { bufferSizePx } = visualConsts;\n\n    const topLeft: GamePxPosition = {\n        gamePxX: viewPort.topLeft.gamePxX - bufferSizePx,\n        gamePxY: viewPort.topLeft.gamePxY - bufferSizePx,\n    };\n\n    const bottomRight: GamePxPosition = {\n        gamePxX: viewPort.bottomRight.gamePxX + bufferSizePx,\n        gamePxY: viewPort.bottomRight.gamePxY + bufferSizePx,\n    };\n\n    return {\n        topLeft,\n        bottomRight,\n    };\n}\n","import { ChunkPosition } from \"../../models/ChunkPosition\";\nimport { GamePxPosition } from \"../../models/GamePxPosition\";\nimport { VisualConsts } from \"../VisualConsts\";\n\nexport function getChunkPosition(visualConsts: VisualConsts, gamePxPosition: GamePxPosition): ChunkPosition {\n    const { chunkSize, tileSize } = visualConsts;\n\n    const chunkPxWidth = chunkSize.tilesWidth * tileSize.pxWidth;\n    const chunkPxHeight = chunkSize.tilesHeight * tileSize.pxHeight;\n\n    const { gamePxX, gamePxY } = gamePxPosition;\n    const chunksX = Math.floor(gamePxX / chunkPxWidth);\n    const chunksY = Math.floor(gamePxY / chunkPxHeight);\n\n    return {\n        chunksX,\n        chunksY,\n    };\n}\n","import { ChunkPosition } from \"../../models/ChunkPosition\";\nimport { GamePxPosition } from \"../../models/GamePxPosition\";\nimport { VisualConsts } from \"../VisualConsts\";\n\nexport function getGamePxPosition(visualConsts: VisualConsts, chunkPosition: ChunkPosition): GamePxPosition {\n    const { chunkSize, tileSize } = visualConsts;\n    const { chunksX, chunksY } = chunkPosition;\n\n    const chunkPxWidth = chunkSize.tilesWidth * tileSize.pxWidth;\n    const chunkPxHeight = chunkSize.tilesHeight * tileSize.pxHeight;\n\n    const gamePxX = chunksX * chunkPxWidth;\n    const gamePxY = chunksY * chunkPxHeight;\n\n    return {\n        gamePxX,\n        gamePxY,\n    };\n}\n","import { GamePxPosition } from \"../../models/GamePxPosition\";\nimport { GamePxRectangle } from \"../../models/GamePxRectangle\";\nimport { LayerState } from \"../layer/LayerState\";\nimport { VisualConsts } from \"../VisualConsts\";\n\nexport function getViewPortGamePxCoords(visualConsts: VisualConsts, layerState: LayerState): GamePxRectangle {\n    const { center } = layerState;\n    const { viewPortSize, tileSize } = visualConsts;\n\n    const viewPortGamePxWidth = viewPortSize.tilesWidth * tileSize.pxWidth;\n    const viewPortGamePxHeight = viewPortSize.tilesHeight * tileSize.pxHeight;\n\n    const topLeft: GamePxPosition = {\n        gamePxX: Math.floor(center.gamePxX - viewPortGamePxWidth / 2),\n        gamePxY: Math.floor(center.gamePxY - viewPortGamePxHeight / 2),\n    };\n\n    const bottomRight: GamePxPosition = {\n        gamePxX: topLeft.gamePxX + viewPortGamePxWidth,\n        gamePxY: topLeft.gamePxY + viewPortGamePxHeight,\n    };\n\n    return {\n        topLeft,\n        bottomRight,\n    };\n}\n","export class Mountable {\n    private parent?: HTMLElement;\n    private current?: HTMLElement;\n\n    public mount(parent: HTMLElement, current: HTMLElement) {\n        if (this.parent) {\n            throw new Error(\"Already mounted\");\n        }\n\n        parent.appendChild(current);\n        this.parent = parent;\n        this.current = current;\n    }\n\n    public unmount(current: HTMLElement) {\n        if (!this.parent || !this.current) {\n            return;\n        }\n\n        this.parent.removeChild(current);\n        this.parent = undefined;\n        this.current = undefined;\n    }\n}\n","import { GamePxPosition } from \"../../models/GamePxPosition\";\nimport { Layer } from \"../layer/Layer\";\nimport { Mountable } from \"../mountable/Mountable\";\nimport { VisualConsts } from \"../VisualConsts\";\n\nexport class ViewPort extends Mountable {\n    private container: HTMLDivElement;\n    private layer: Layer;\n\n    constructor(visualConsts: VisualConsts) {\n        super();\n\n        this.container = document.createElement(\"div\");\n        this.container.className = \"mmo-viewport\";\n\n        const { viewPortSize, tileSize } = visualConsts;\n        const viewPortPxWidth = viewPortSize.tilesWidth * tileSize.pxWidth;\n        const viewPortPxHeight = viewPortSize.tilesHeight * tileSize.pxHeight;\n        this.container.style.width = `${viewPortPxWidth}px`;\n        this.container.style.height = `${viewPortPxHeight}px`;\n\n        this.layer = new Layer(visualConsts);\n        this.layer.mount(this.container);\n    }\n\n    public mount(parent: HTMLElement) {\n        super.mount(parent, this.container);\n    }\n\n    public unmount() {\n        super.unmount(this.container);\n    }\n\n    public centerOn(position: GamePxPosition) {\n        this.layer.centerOn(position);\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import \"./index.scss\";\nimport { ViewPort } from \"./visual/viewport/ViewPort\";\n\nconst root = document.createElement(\"div\");\ndocument.body.appendChild(root);\n\nconst viewport = new ViewPort({\n    bufferSizePx: 256,\n    tileSize: {\n        pxWidth: 128,\n        pxHeight: 128,\n    },\n    viewPortSize: {\n        tilesWidth: 6,\n        tilesHeight: 6,\n    },\n    chunkSize: {\n        tilesWidth: 6,\n        tilesHeight: 6,\n    },\n});\n\nviewport.mount(root);\n\nlet x = 0;\nlet y = 0;\n\ndocument.addEventListener(\"keydown\", ({ code }) => {\n    const d = 20;\n    let dx = 0;\n    let dy = 0;\n\n    switch (code) {\n        case \"ArrowUp\":\n            dy = -d;\n            break;\n\n        case \"ArrowDown\":\n            dy = d;\n            break;\n\n        case \"ArrowLeft\":\n            dx = -d;\n            break;\n\n        case \"ArrowRight\":\n            dx = d;\n            break;\n\n        default:\n            return;\n    }\n\n    x += dx;\n    y += dy;\n    console.log(`CODE: ${code}, x: ${x}, y: ${y}`);\n\n    viewport.centerOn({ gamePxX: x, gamePxY: y });\n});\n\nconsole.log(\"Hello world\");\n"],"sourceRoot":""}
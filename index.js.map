{"version":3,"sources":["webpack://mmo-client/./src/utils/randomColor.ts","webpack://mmo-client/./src/utils/randomNumber.ts","webpack://mmo-client/./src/utils/single.ts","webpack://mmo-client/./src/utils/sure.ts","webpack://mmo-client/./src/visual/canvas/Canvas.ts","webpack://mmo-client/./src/visual/chunk/Chunk.ts","webpack://mmo-client/./src/visual/layer/Layer.ts","webpack://mmo-client/./src/visual/logic/getBufferedViewPortGamePxCoords.ts","webpack://mmo-client/./src/visual/logic/getChunkPosition.ts","webpack://mmo-client/./src/visual/logic/getGamePxPosition.ts","webpack://mmo-client/./src/visual/logic/getViewPortGamePxCoords.ts","webpack://mmo-client/./src/visual/mountable/Mountable.ts","webpack://mmo-client/./src/visual/sprites/Sprite.ts","webpack://mmo-client/./src/visual/sprites/sprites.ts","webpack://mmo-client/./src/visual/viewport/ViewPort.ts","webpack://mmo-client/webpack/bootstrap","webpack://mmo-client/webpack/runtime/global","webpack://mmo-client/webpack/runtime/make namespace object","webpack://mmo-client/webpack/runtime/publicPath","webpack://mmo-client/./src/index.ts"],"names":["r","randomNumber","g","b","toString","padStart","min","max","Math","floor","random","arr","length","Error","value","visualConsts","canvas","document","createElement","tileSize","chunkSize","canvasPxSizeWidth","pxWidth","tilesWidth","canvasPxSizeHeight","pxHeight","tilesHeight","width","height","context","sure","getContext","mount","parent","this","unmount","__fillTile","tileX","tileY","color","canvasPxX","canvasPxY","fillStyle","fillRect","text","strokeStyle","font","fillText","strokeText","drawSprite","sprite","position","drawOnContext","Mountable","Canvas","chunkSettings","container","className","getGamePxPosition","gamePxX","gamePxY","style","left","top","__fillChunk","x","y","randomColor","Chunk","chunks","layerState","center","centerOn","syncChunks","topLeft","getViewPortGamePxCoords","gamePosition","getSize","size","topLeftGamePosition","bottomRightGamePosition","topLeftChunkPosition","getChunkPosition","bottomRightChunkPosition","chunksX","chunksY","chunkPosition","tryDrawSpriteOnChunk","chunk","getChunkAt","chunkGamePosition","inChunkPxPosition","pxX","pxY","viewPort","bufferedViewPort","getBufferedViewPortGamePxCoords","bufferedViewPortTopLeftChunk","bufferedViewPortBottomRightChunk","bottomRight","removeChunksOutside","createMissingChunksInside","topLeftChunk","bottomRightChunk","i","chunkPosX","chunkPosY","console","log","splice","__drawRandomContent","push","single","filter","q","chunkPxWidth","chunkPxHeight","sprites","palm","Layer","bufferSizePx","gamePxPosition","viewPortSize","viewPortGamePxWidth","viewPortGamePxHeight","current","appendChild","removeChild","undefined","path","img","loaded","Promise","resolve","reject","addEventListener","src","drawImage","Sprite","viewPortPxWidth","viewPortPxHeight","layer","ViewPort","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","globalThis","Function","e","window","Symbol","toStringTag","Object","defineProperty","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","replace","p","root","body","viewport","code","dx","dy"],"mappings":"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","file":"index.js","sourcesContent":["import { randomNumber } from \"./randomNumber\";\n\nexport function randomColor() {\n    const r = randomNumber(0, 256);\n    const g = randomNumber(0, 256);\n    const b = randomNumber(0, 256);\n\n    const rx = r.toString(16).padStart(2, \"0\");\n    const gx = g.toString(16).padStart(2, \"0\");\n    const bx = b.toString(16).padStart(2, \"0\");\n\n    return `#${rx}${gx}${bx}`;\n}\n","export function randomNumber(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n","export function single<T>(arr: T[]): T | undefined {\n    if (arr.length > 1) {\n        throw new Error(`arr.length > 1`);\n    }\n\n    return arr[0];\n}\n","export function sure<T>(value: T | null | undefined): T {\n    if (value === null || value === undefined) {\n        throw new Error(\"value === null || value === undefined\");\n    }\n\n    return value;\n}\n","import { PxPosition } from \"../../models/PxPosition\";\nimport { randomNumber } from \"../../utils/randomNumber\";\nimport { sure } from \"../../utils/sure\";\nimport { Mountable } from \"../mountable/Mountable\";\nimport { Sprite } from \"../sprites/Sprite\";\nimport { VisualConsts } from \"../VisualConsts\";\n\nexport class Canvas extends Mountable {\n    private visualConsts: VisualConsts;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n\n    constructor(visualConsts: VisualConsts) {\n        super();\n\n        this.visualConsts = visualConsts;\n\n        this.canvas = document.createElement(\"canvas\");\n\n        const { tileSize, chunkSize } = visualConsts;\n        const canvasPxSizeWidth = tileSize.pxWidth * chunkSize.tilesWidth;\n        const canvasPxSizeHeight = tileSize.pxHeight * chunkSize.tilesHeight;\n\n        this.canvas.width = canvasPxSizeWidth;\n        this.canvas.height = canvasPxSizeHeight;\n\n        this.context = sure(this.canvas.getContext(\"2d\"));\n    }\n\n    public mount(parent: HTMLElement) {\n        super.mount(parent, this.canvas);\n    }\n\n    public unmount() {\n        super.unmount(this.canvas);\n    }\n\n    public __fillTile(tileX: number, tileY: number, color: string) {\n        const { tileSize } = this.visualConsts;\n\n        const canvasPxX = tileSize.pxWidth * tileX;\n        const canvasPxY = tileSize.pxHeight * tileY;\n\n        this.context.fillStyle = color;\n        this.context.fillRect(canvasPxX, canvasPxY, tileSize.pxWidth, tileSize.pxHeight);\n\n        const text = `${tileX} / ${tileY}`;\n        this.context.strokeStyle = \"#444\";\n        this.context.fillStyle = \"#fff\";\n        this.context.font = \"32px Arial\";\n        this.context.fillText(text, canvasPxX + 20, canvasPxY + 60);\n        this.context.strokeText(text, canvasPxX + 20, canvasPxY + 60);\n    }\n\n    public async drawSprite(sprite: Sprite, position: PxPosition) {\n        await sprite.drawOnContext(this.context, position);\n    }\n}\n","import { getGamePxPosition } from \"../logic/getGamePxPosition\";\nimport { Canvas } from \"../canvas/Canvas\";\nimport { Mountable } from \"../mountable/Mountable\";\nimport { VisualConsts } from \"../VisualConsts\";\nimport { ChunkSettings } from \"./ChunkSettings\";\nimport { randomColor } from \"../../utils/randomColor\";\nimport { PxPosition } from \"../../models/PxPosition\";\nimport { randomNumber } from \"../../utils/randomNumber\";\nimport { sprites } from \"../sprites/sprites\";\nimport { Sprite } from \"../sprites/Sprite\";\n\nexport class Chunk extends Mountable {\n    private visualConsts: VisualConsts;\n    private container: HTMLDivElement;\n    private canvas: Canvas;\n\n    public chunkSettings: ChunkSettings;\n\n    constructor(visualConsts: VisualConsts, chunkSettings: ChunkSettings) {\n        super();\n\n        this.visualConsts = visualConsts;\n        this.chunkSettings = chunkSettings;\n\n        this.container = document.createElement(\"div\");\n        this.container.className = \"mmo-chunk\";\n\n        const { gamePxX, gamePxY } = getGamePxPosition(visualConsts, chunkSettings.position);\n        this.container.style.left = `${gamePxX}px`;\n        this.container.style.top = `${gamePxY}px`;\n\n        this.canvas = new Canvas(visualConsts);\n        this.canvas.mount(this.container);\n    }\n\n    public mount(parent: HTMLElement) {\n        super.mount(parent, this.container);\n    }\n\n    public unmount() {\n        super.unmount(this.container);\n    }\n\n    public async drawSprite(sprite: Sprite, position: PxPosition) {\n        await this.canvas.drawSprite(sprite, position);\n    }\n\n    public async __fillChunk() {\n        for (let x = 0; x < 6; x++) {\n            for (let y = 0; y < 6; y++) {\n                this.__fillTile(x, y, randomColor());\n            }\n        }\n    }\n\n    private __fillTile(tileX: number, tileY: number, color: string) {\n        this.canvas.__fillTile(tileX, tileY, color);\n    }\n}\n","import { ChunkPosition } from \"../../models/ChunkPosition\";\nimport { randomColor } from \"../../utils/randomColor\";\nimport { Chunk } from \"../chunk/Chunk\";\nimport { Mountable } from \"../mountable/Mountable\";\nimport { VisualConsts } from \"../VisualConsts\";\nimport { LayerState } from \"./LayerState\";\nimport { getChunkPosition } from \"../logic/getChunkPosition\";\nimport { getViewPortGamePxCoords } from \"../logic/getViewPortGamePxCoords\";\nimport { GamePxPosition } from \"../../models/GamePxPosition\";\nimport { getBufferedViewPortGamePxCoords } from \"../logic/getBufferedViewPortGamePxCoords\";\nimport { PxPosition } from \"../../models/PxPosition\";\nimport { randomNumber } from \"../../utils/randomNumber\";\nimport { sprites } from \"../sprites/sprites\";\nimport { Sprite } from \"../sprites/Sprite\";\nimport { single } from \"../../utils/single\";\nimport { getGamePxPosition } from \"../logic/getGamePxPosition\";\n\nexport class Layer extends Mountable {\n    private container: HTMLDivElement;\n    private chunks: Chunk[] = [];\n\n    private visualConsts: VisualConsts;\n    private layerState: LayerState;\n\n    constructor(visualConsts: VisualConsts) {\n        super();\n\n        this.visualConsts = visualConsts;\n\n        this.layerState = {\n            center: {\n                gamePxX: 0,\n                gamePxY: 0,\n            },\n        };\n\n        this.container = document.createElement(\"div\");\n        this.container.className = \"mmo-layer\";\n\n        this.centerOn(this.layerState.center);\n    }\n\n    public mount(parent: HTMLElement) {\n        super.mount(parent, this.container);\n    }\n\n    public unmount() {\n        super.unmount(this.container);\n    }\n\n    public centerOn(position: GamePxPosition) {\n        const { gamePxX, gamePxY } = position;\n        this.layerState.center.gamePxX = gamePxX;\n        this.layerState.center.gamePxY = gamePxY;\n\n        this.syncChunks();\n\n        const { topLeft } = getViewPortGamePxCoords(this.visualConsts, this.layerState);\n\n        this.container.style.left = `${-topLeft.gamePxX}px`;\n        this.container.style.top = `${-topLeft.gamePxY}px`;\n    }\n\n    public async drawSprite(sprite: Sprite, gamePosition: GamePxPosition) {\n        const size = await sprite.getSize();\n\n        const topLeftGamePosition = gamePosition;\n        const bottomRightGamePosition: GamePxPosition = {\n            gamePxX: gamePosition.gamePxX + size.pxWidth,\n            gamePxY: gamePosition.gamePxY + size.pxHeight,\n        };\n\n        const topLeftChunkPosition = getChunkPosition(this.visualConsts, topLeftGamePosition);\n        const bottomRightChunkPosition = getChunkPosition(this.visualConsts, bottomRightGamePosition);\n\n        for (let chunksX = topLeftChunkPosition.chunksX; chunksX <= bottomRightChunkPosition.chunksX; chunksX++) {\n            for (let chunksY = topLeftChunkPosition.chunksY; chunksY <= bottomRightChunkPosition.chunksY; chunksY++) {\n                const chunkPosition = { chunksX, chunksY };\n                await this.tryDrawSpriteOnChunk(sprite, gamePosition, chunkPosition);\n            }\n        }\n    }\n\n    private async tryDrawSpriteOnChunk(sprite: Sprite, gamePosition: GamePxPosition, chunkPosition: ChunkPosition) {\n        const chunk = this.getChunkAt(chunkPosition);\n        if (!chunk) {\n            return;\n        }\n\n        const chunkGamePosition = getGamePxPosition(this.visualConsts, chunkPosition);\n\n        const inChunkPxPosition: PxPosition = {\n            pxX: gamePosition.gamePxX - chunkGamePosition.gamePxX,\n            pxY: gamePosition.gamePxY - chunkGamePosition.gamePxY,\n        };\n\n        await chunk.drawSprite(sprite, inChunkPxPosition);\n    }\n\n    private syncChunks() {\n        const viewPort = getViewPortGamePxCoords(this.visualConsts, this.layerState);\n        const bufferedViewPort = getBufferedViewPortGamePxCoords(this.visualConsts, viewPort);\n\n        const bufferedViewPortTopLeftChunk = getChunkPosition(this.visualConsts, bufferedViewPort.topLeft);\n        const bufferedViewPortBottomRightChunk = getChunkPosition(this.visualConsts, bufferedViewPort.bottomRight);\n\n        this.removeChunksOutside(bufferedViewPortTopLeftChunk, bufferedViewPortBottomRightChunk);\n        this.createMissingChunksInside(bufferedViewPortTopLeftChunk, bufferedViewPortBottomRightChunk);\n    }\n\n    private removeChunksOutside(topLeftChunk: ChunkPosition, bottomRightChunk: ChunkPosition) {\n        for (let i = this.chunks.length - 1; i >= 0; i--) {\n            const chunk = this.chunks[i];\n            const chunkPosX = chunk.chunkSettings.position.chunksX;\n            const chunkPosY = chunk.chunkSettings.position.chunksY;\n\n            if (\n                chunkPosX < topLeftChunk.chunksX ||\n                chunkPosX > bottomRightChunk.chunksX ||\n                chunkPosY < topLeftChunk.chunksY ||\n                chunkPosY > bottomRightChunk.chunksY\n            ) {\n                console.log(`>>> REMOVING CHUNK [${chunkPosX}, ${chunkPosY}]`);\n                this.chunks[i].unmount();\n                this.chunks.splice(i, 1);\n            }\n        }\n    }\n\n    private createMissingChunksInside(topLeftChunk: ChunkPosition, bottomRightChunk: ChunkPosition) {\n        for (let chunksX = topLeftChunk.chunksX; chunksX <= bottomRightChunk.chunksX; chunksX++) {\n            for (let chunksY = topLeftChunk.chunksY; chunksY <= bottomRightChunk.chunksY; chunksY++) {\n                const existingChunk = this.getChunkAt({ chunksX, chunksY });\n                if (existingChunk) {\n                    continue;\n                }\n\n                console.log(`>>> CREATING CHUNK [${chunksX}, ${chunksY}]`);\n\n                const chunk = new Chunk(this.visualConsts, {\n                    position: {\n                        chunksX,\n                        chunksY,\n                    },\n                });\n                chunk.mount(this.container);\n\n                this.__drawRandomContent(chunk);\n\n                this.chunks.push(chunk);\n            }\n        }\n    }\n\n    private getChunkAt({ chunksX, chunksY }: ChunkPosition): Chunk | undefined {\n        return single(\n            this.chunks.filter(\n                q => q.chunkSettings.position.chunksX === chunksX && q.chunkSettings.position.chunksY === chunksY\n            )\n        );\n    }\n\n    private async __drawRandomContent(chunk: Chunk) {\n        chunk.__fillChunk();\n\n        const { chunkSize, tileSize } = this.visualConsts;\n        const chunkPxWidth = chunkSize.tilesWidth * tileSize.pxWidth;\n        const chunkPxHeight = chunkSize.tilesHeight * tileSize.pxHeight;\n\n        const chunkGamePosition = getGamePxPosition(this.visualConsts, chunk.chunkSettings.position);\n\n        for (let i = 0; i < 5; i++) {\n            await this.drawSprite(sprites.palm, {\n                gamePxX: chunkGamePosition.gamePxX + randomNumber(0, chunkPxWidth),\n                gamePxY: chunkGamePosition.gamePxY + randomNumber(0, chunkPxHeight),\n            });\n        }\n    }\n}\n","import { GamePxPosition } from \"../../models/GamePxPosition\";\nimport { GamePxRectangle } from \"../../models/GamePxRectangle\";\nimport { VisualConsts } from \"../VisualConsts\";\n\nexport function getBufferedViewPortGamePxCoords(\n    visualConsts: VisualConsts,\n    viewPort: GamePxRectangle\n): GamePxRectangle {\n    const { bufferSizePx } = visualConsts;\n\n    const topLeft: GamePxPosition = {\n        gamePxX: viewPort.topLeft.gamePxX - bufferSizePx,\n        gamePxY: viewPort.topLeft.gamePxY - bufferSizePx,\n    };\n\n    const bottomRight: GamePxPosition = {\n        gamePxX: viewPort.bottomRight.gamePxX + bufferSizePx,\n        gamePxY: viewPort.bottomRight.gamePxY + bufferSizePx,\n    };\n\n    return {\n        topLeft,\n        bottomRight,\n    };\n}\n","import { ChunkPosition } from \"../../models/ChunkPosition\";\nimport { GamePxPosition } from \"../../models/GamePxPosition\";\nimport { VisualConsts } from \"../VisualConsts\";\n\nexport function getChunkPosition(visualConsts: VisualConsts, gamePxPosition: GamePxPosition): ChunkPosition {\n    const { chunkSize, tileSize } = visualConsts;\n\n    const chunkPxWidth = chunkSize.tilesWidth * tileSize.pxWidth;\n    const chunkPxHeight = chunkSize.tilesHeight * tileSize.pxHeight;\n\n    const { gamePxX, gamePxY } = gamePxPosition;\n    const chunksX = Math.floor(gamePxX / chunkPxWidth);\n    const chunksY = Math.floor(gamePxY / chunkPxHeight);\n\n    return {\n        chunksX,\n        chunksY,\n    };\n}\n","import { ChunkPosition } from \"../../models/ChunkPosition\";\nimport { GamePxPosition } from \"../../models/GamePxPosition\";\nimport { VisualConsts } from \"../VisualConsts\";\n\nexport function getGamePxPosition(visualConsts: VisualConsts, chunkPosition: ChunkPosition): GamePxPosition {\n    const { chunkSize, tileSize } = visualConsts;\n    const { chunksX, chunksY } = chunkPosition;\n\n    const chunkPxWidth = chunkSize.tilesWidth * tileSize.pxWidth;\n    const chunkPxHeight = chunkSize.tilesHeight * tileSize.pxHeight;\n\n    const gamePxX = chunksX * chunkPxWidth;\n    const gamePxY = chunksY * chunkPxHeight;\n\n    return {\n        gamePxX,\n        gamePxY,\n    };\n}\n","import { GamePxPosition } from \"../../models/GamePxPosition\";\nimport { GamePxRectangle } from \"../../models/GamePxRectangle\";\nimport { LayerState } from \"../layer/LayerState\";\nimport { VisualConsts } from \"../VisualConsts\";\n\nexport function getViewPortGamePxCoords(visualConsts: VisualConsts, layerState: LayerState): GamePxRectangle {\n    const { center } = layerState;\n    const { viewPortSize, tileSize } = visualConsts;\n\n    const viewPortGamePxWidth = viewPortSize.tilesWidth * tileSize.pxWidth;\n    const viewPortGamePxHeight = viewPortSize.tilesHeight * tileSize.pxHeight;\n\n    const topLeft: GamePxPosition = {\n        gamePxX: Math.floor(center.gamePxX - viewPortGamePxWidth / 2),\n        gamePxY: Math.floor(center.gamePxY - viewPortGamePxHeight / 2),\n    };\n\n    const bottomRight: GamePxPosition = {\n        gamePxX: topLeft.gamePxX + viewPortGamePxWidth,\n        gamePxY: topLeft.gamePxY + viewPortGamePxHeight,\n    };\n\n    return {\n        topLeft,\n        bottomRight,\n    };\n}\n","export class Mountable {\n    private parent?: HTMLElement;\n    private current?: HTMLElement;\n\n    public mount(parent: HTMLElement, current: HTMLElement) {\n        if (this.parent) {\n            throw new Error(\"Already mounted\");\n        }\n\n        parent.appendChild(current);\n        this.parent = parent;\n        this.current = current;\n    }\n\n    public unmount(current: HTMLElement) {\n        if (!this.parent || !this.current) {\n            return;\n        }\n\n        this.parent.removeChild(current);\n        this.parent = undefined;\n        this.current = undefined;\n    }\n}\n","import { PxPosition } from \"../../models/PxPosition\";\nimport { PxSize } from \"../../models/PxSize\";\n\nexport class Sprite {\n    private img: HTMLImageElement;\n\n    private loaded: Promise<void>;\n\n    constructor(path: string) {\n        this.img = document.createElement(\"img\");\n\n        this.loaded = new Promise((resolve, reject) => {\n            this.img.addEventListener(\"error\", reject);\n            this.img.addEventListener(\"load\", () => resolve());\n        });\n\n        this.img.src = path;\n    }\n\n    public async getSize(): Promise<PxSize> {\n        await this.loaded;\n\n        return {\n            pxWidth: this.img.width,\n            pxHeight: this.img.height,\n        };\n    }\n\n    public async drawOnContext(context: CanvasRenderingContext2D, position: PxPosition) {\n        await this.loaded;\n\n        const { pxX, pxY } = position;\n\n        context.drawImage(this.img, pxX, pxY);\n    }\n}\n","import { Sprite } from \"./Sprite\";\n\nexport const sprites = {\n    palm: new Sprite(require(\"../../assets/sprites/palm.png\")),\n};\n","import { GamePxPosition } from \"../../models/GamePxPosition\";\nimport { Layer } from \"../layer/Layer\";\nimport { Mountable } from \"../mountable/Mountable\";\nimport { VisualConsts } from \"../VisualConsts\";\n\nexport class ViewPort extends Mountable {\n    private container: HTMLDivElement;\n    private layer: Layer;\n\n    constructor(visualConsts: VisualConsts) {\n        super();\n\n        this.container = document.createElement(\"div\");\n        this.container.className = \"mmo-viewport\";\n\n        const { viewPortSize, tileSize } = visualConsts;\n        const viewPortPxWidth = viewPortSize.tilesWidth * tileSize.pxWidth;\n        const viewPortPxHeight = viewPortSize.tilesHeight * tileSize.pxHeight;\n        this.container.style.width = `${viewPortPxWidth}px`;\n        this.container.style.height = `${viewPortPxHeight}px`;\n\n        this.layer = new Layer(visualConsts);\n        this.layer.mount(this.container);\n    }\n\n    public mount(parent: HTMLElement) {\n        super.mount(parent, this.container);\n    }\n\n    public unmount() {\n        super.unmount(this.container);\n    }\n\n    public centerOn(position: GamePxPosition) {\n        this.layer.centerOn(position);\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import \"./index.scss\";\nimport { ViewPort } from \"./visual/viewport/ViewPort\";\n\nconst root = document.createElement(\"div\");\ndocument.body.appendChild(root);\n\nconst viewport = new ViewPort({\n    bufferSizePx: 256,\n    tileSize: {\n        pxWidth: 128,\n        pxHeight: 128,\n    },\n    viewPortSize: {\n        tilesWidth: 6,\n        tilesHeight: 6,\n    },\n    chunkSize: {\n        tilesWidth: 6,\n        tilesHeight: 6,\n    },\n});\n\nviewport.mount(root);\n\nlet x = 0;\nlet y = 0;\n\ndocument.addEventListener(\"keydown\", ({ code }) => {\n    const d = 20;\n    let dx = 0;\n    let dy = 0;\n\n    switch (code) {\n        case \"ArrowUp\":\n            dy = -d;\n            break;\n\n        case \"ArrowDown\":\n            dy = d;\n            break;\n\n        case \"ArrowLeft\":\n            dx = -d;\n            break;\n\n        case \"ArrowRight\":\n            dx = d;\n            break;\n\n        default:\n            return;\n    }\n\n    x += dx;\n    y += dy;\n    console.log(`CODE: ${code}, x: ${x}, y: ${y}`);\n\n    viewport.centerOn({ gamePxX: x, gamePxY: y });\n});\n\nconsole.log(\"Hello world\");\n"],"sourceRoot":""}